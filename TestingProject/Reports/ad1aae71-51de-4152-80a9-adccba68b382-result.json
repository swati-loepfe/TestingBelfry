{"name": "test_settings", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div class=\"cdk-overlay-container\">...</div> is not clickable at point (1720, 635). Other element would receive the click: <span _ngcontent-vev-c58=\"\">...</span>\n  (Session info: chrome=122.0.6261.131)\nStacktrace:\n\tGetHandleVerifier [0x00007FF71B81AD32+56930]\n\t(No symbol) [0x00007FF71B78F632]\n\t(No symbol) [0x00007FF71B6442E5]\n\t(No symbol) [0x00007FF71B690A80]\n\t(No symbol) [0x00007FF71B68E8AB]\n\t(No symbol) [0x00007FF71B68C0B4]\n\t(No symbol) [0x00007FF71B68AE45]\n\t(No symbol) [0x00007FF71B67F798]\n\t(No symbol) [0x00007FF71B6ABC9A]\n\t(No symbol) [0x00007FF71B67F09A]\n\t(No symbol) [0x00007FF71B6ABEB0]\n\t(No symbol) [0x00007FF71B6C81E2]\n\t(No symbol) [0x00007FF71B6ABA43]\n\t(No symbol) [0x00007FF71B67D438]\n\t(No symbol) [0x00007FF71B67E4D1]\n\tGetHandleVerifier [0x00007FF71BB96ABD+3709933]\n\tGetHandleVerifier [0x00007FF71BBEFFFD+4075821]\n\tGetHandleVerifier [0x00007FF71BBE818F+4043455]\n\tGetHandleVerifier [0x00007FF71B8B9766+706710]\n\t(No symbol) [0x00007FF71B79B90F]\n\t(No symbol) [0x00007FF71B796AF4]\n\t(No symbol) [0x00007FF71B796C4C]\n\t(No symbol) [0x00007FF71B786904]\n\tBaseThreadInitThunk [0x00007FFCC60E257D+29]\n\tRtlUserThreadStart [0x00007FFCC63EAA58+40]", "trace": "setup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"4fbbf09fc9fdb114263bb2d5d359f244\")>\n\n    def test_settings(setup):\n        driver = setup\n        driver.get(TestLogin.baseURL)\n        driver.maximize_window()\n        driver.implicitly_wait(50)\n        screenpage = ScreensaverPage(driver)\n        screenpage.screensaver_button().click()\n        loginpage = LoginPage(driver)\n        loginpage.return_login_button().click()\n        loginpage.return_login_password().click()\n        loginpage.return_login_keyboard().click()\n        loginpage.return_set_password().send_keys(123)\n        loginpage.return_login_check1().click()\n        loginpage.return_login_check2().click()\n        settingspage = SettingsPage(driver)\n        time.sleep(10)\n        settingspage.settings_button().click()\n        time.sleep(10)\n>       settingspage.settings_button1().click()\n\ntestCases\\test_e2eBelfry.py:95: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001A1298CC350>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF71B786904]\\\\n\\\\tBaseThreadInitThunk [0x00007FFCC60E257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFCC63EAA58+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div class=\"cdk-overlay-container\">...</div> is not clickable at point (1720, 635). Other element would receive the click: <span _ngcontent-vev-c58=\"\">...</span>\nE         (Session info: chrome=122.0.6261.131)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF71B81AD32+56930]\nE       \t(No symbol) [0x00007FF71B78F632]\nE       \t(No symbol) [0x00007FF71B6442E5]\nE       \t(No symbol) [0x00007FF71B690A80]\nE       \t(No symbol) [0x00007FF71B68E8AB]\nE       \t(No symbol) [0x00007FF71B68C0B4]\nE       \t(No symbol) [0x00007FF71B68AE45]\nE       \t(No symbol) [0x00007FF71B67F798]\nE       \t(No symbol) [0x00007FF71B6ABC9A]\nE       \t(No symbol) [0x00007FF71B67F09A]\nE       \t(No symbol) [0x00007FF71B6ABEB0]\nE       \t(No symbol) [0x00007FF71B6C81E2]\nE       \t(No symbol) [0x00007FF71B6ABA43]\nE       \t(No symbol) [0x00007FF71B67D438]\nE       \t(No symbol) [0x00007FF71B67E4D1]\nE       \tGetHandleVerifier [0x00007FF71BB96ABD+3709933]\nE       \tGetHandleVerifier [0x00007FF71BBEFFFD+4075821]\nE       \tGetHandleVerifier [0x00007FF71BBE818F+4043455]\nE       \tGetHandleVerifier [0x00007FF71B8B9766+706710]\nE       \t(No symbol) [0x00007FF71B79B90F]\nE       \t(No symbol) [0x00007FF71B796AF4]\nE       \t(No symbol) [0x00007FF71B796C4C]\nE       \t(No symbol) [0x00007FF71B786904]\nE       \tBaseThreadInitThunk [0x00007FFCC60E257D+29]\nE       \tRtlUserThreadStart [0x00007FFCC63EAA58+40]\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "start": 1711093515166, "stop": 1711093544892, "uuid": "14341564-d7e8-4cd4-8be2-691f00227b23", "historyId": "a8c2e5487017b54c729d3a9025a6c5ae", "testCaseId": "a8c2e5487017b54c729d3a9025a6c5ae", "fullName": "testCases.test_e2eBelfry#test_settings", "labels": [{"name": "parentSuite", "value": "testCases"}, {"name": "suite", "value": "test_e2eBelfry"}, {"name": "host", "value": "WETCLT61017"}, {"name": "thread", "value": "36844-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCases.test_e2eBelfry"}]}